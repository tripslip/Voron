[gcode_macro START_PRINT]
description: Start Print
gcode:

    {% set T_BED = params.T_BED|default(60)|int %}
    {% set T_EXTRUDER = params.T_EXTRUDER|default(210)|int %}
    #{% set AREA_START = params.AREA_START|default("0,0")|int %}
    #{% set AREA_END = params.AREA_END|default("0,0")|int %}
    M220 S100
    G90                                                 # Use absolute coordinates
        {% if printer.extruder.temperature < 180 %}
            #M117 Heating from {printer.extruder.temperature}C to 150C.
            M104 S150
        {% else %}
            M117 Nozzle's Ready
        {% endif %}
    M117
    STATUS_HEATING
    M117 Heating
    M140 S{T_BED}                                       # Set Bed Temperature
    M117 Waiting for Bed Temp...
    M190 S{T_BED}                                       # Wait for Bed Temperature
    M117
    STATUS_CLEANING
    CLEAN_NOZZLE
    STATUS_HOMING
    G28 Z
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    G28 Z
    STATUS_MESHING
    BED_MESH_CALIBRATE                                # Set Hotend Temperature
    STATUS_HEATING
    M117 Waiting for Nozzle Temp...                     
    M109 S{T_EXTRUDER}                                  # Wait for Hotend Temperature #
    M104 S{T_EXTRUDER}  
    #G92 E0                                              # Reset Extruder # WAS WORKING #
    M117
    # BED_MESH_PROFILE LOAD=default
    ADAPTIVE_PURGE
    STATUS_PRINTING


######################################
##G32
######################################
[gcode_macro G32]
gcode:
    {% set V = printer["gcode_macro _User_Variables"].verbose %}
    {% if V %}
        { action_respond_info("QG Level") }
    {% endif %}
  BED_MESH_CLEAR
  STATUS_HOMING
  G28
  STATUS_LEVELING
  QUAD_GANTRY_LEVEL
  G28 Z
  STATUS_LEVELING
  STATUS_PART_READY

#########################
##
########################

#[gcode_macro QUAD_GANTRY_LEVEL]
#rename_existing: _QUAD_GANTRY_LEVEL
#description: Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount
#gcode:
#    {% set V = printer["gcode_macro _User_Variables"].verbose %}
#    {% if V %}
#        { action_respond_info("QG Level") }
#    {% endif %}
#	G90
#    _QUAD_GANTRY_LEVEL {% for p in params
#            %}{'%s=%s ' % (p, params[p])}{%
#            endfor %}

   
######################################
##End Print
######################################
[gcode_macro PRINT_END]
gcode:

    STATUS_PART_READY    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    

    LIFT_Z
    G90
    G0 X295 Y348 F3600
    M400                           ; wait for buffer to clear
    G0 E-6.5 F300                 ; retract filament
    G92 E0                         ; zero the extruder
    
    TURN_OFF_HEATERS


[gcode_macro lift_z]
gcode:
    G91
    G0 Z15 F8000
    G90


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  LIFT_Z
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  G90
  G0 X295 Y348 F3600
  M400                           ; wait for buffer to clear
  G0 E-6.5 F300                 ; retract filament
  G92 E0



######################################
## Z CAL
######################################
[gcode_macro Z_Cal]
gcode:
  STATUS_CALIBRATING_Z
  #status_calibrating_z
  CALIBRATE_Z


######################################
##Pause Macro
######################################
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  lift_z
  _TOOLHEAD_PARK_PAUSE_CANCEL

##########
##Resume Macro
############
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

######################################
##Off
######################################
[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    #SET_FAN_SPEED FAN=Exhaust SPEED=0   ; turn exhaust fan off
    #SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    #SET_PIN PIN=caselight VALUE=0       ; turn case light off
######################################


[gcode_macro unload_filament]
gcode:
    M109 S235
    M83
    G1 E15 F300
    G1 E-860 F1800
    M82

#[gcode_macro load_filament]
#M109 S235
#M83
#G1 E760 F1800
#G1 E30 F300
#G1 E-10 F1800
#M82

#[gcode_macro PAUSE]
##description: Pause the actual running print
##rename_existing: PAUSE_BASE
## change this if you need more or less extrusion
#variable_extrude: 1.0
#gcode:
#  ##### read E from pause macro #####
#  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#  ##### set park positon for x and y #####
#  # default is your max posion from your printer.cfg
#  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
#  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
#  ##### calculate save lift position #####
#  {% set max_z = printer.toolhead.axis_maximum.z|float %}
#  {% set act_z = printer.toolhead.position.z|float %}
#  {% if act_z < (max_z - 2.0) %}
#      {% set z_safe = 2.0 %}
#  {% else %}
#      {% set z_safe = max_z - act_z %}
#  {% endif %}
#  ##### end of definitions #####
#  PAUSE_BASE
#  G91
#  {% if printer.extruder.can_extrude|lower == 'true' %}
#    G1 E-{E} F2100
#  {% else %}
#    {action_respond_info("Extruder not hot enough")}
#  {% endif %}
#  {% if "xyz" in printer.toolhead.homed_axes %}
#    G1 Z{z_safe} F900
#    G90
#    G1 X{x_park} Y{y_park} F6000
#  {% else %}
#    {action_respond_info("Printer not homed")}
#  {% endif %}